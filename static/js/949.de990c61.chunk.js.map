{"version":3,"file":"static/js/949.de990c61.chunk.js","mappings":"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","sources":["pages/cabo/constant.js","pages/cabo/score-board/index.js"],"sourcesContent":["export const PLAYER_NUM_SUPPORT = {\n  2: \"2\",\n  3: \"3\",\n  4: \"4\",\n  5: \"5\",\n  6: \"6\",\n};\n","import { useSearchParams } from \"react-router-dom\";\nimport { Flex, Table, Button, Modal, Divider, InputNumber } from \"antd\";\nimport { PLAYER_NUM_SUPPORT } from \"../constant\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nexport default function CaboScoreBoardPage() {\n  const [params] = useSearchParams();\n  const playerNum = params.get(\"playerNum\");\n\n  if (!Object.keys(PLAYER_NUM_SUPPORT).includes(playerNum)) {\n    return (\n      <Flex className=\"justify-center items-center\">\n        Player num is incorrect\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex>\n      <CaboScoreBoard playerNum={playerNum} />\n    </Flex>\n  );\n}\n\nconst { confirm } = Modal;\n\n\nfunction CaboScoreBoard({ playerNum }) {\n  const tableColumns = [\n    {\n      title: \"ðŸ¦„\",\n      dataIndex: \"round\",\n      key: \"round\",\n      width: 20,\n    },\n  ];\n  const [dataSource, setDataSource] = useState([]);\n  const [openScoreModal, setOpenScoreModal] = useState(false);\n  const [resultInfo, setResultInfo] = useState(\"\");\n\n  useEffect(() => {\n    const scoreMap = {};\n    const discountMap = {};\n    dataSource.forEach((record) => {\n      console.log(JSON.stringify(record));\n      Object.keys(record).forEach((item) => {\n        if (item === \"round\" || item === \"key\") {\n          return;\n        }\n        if (!scoreMap[item]) {\n          scoreMap[item] = 0;\n        }\n        scoreMap[item] += record[item];\n        if (scoreMap[item] === 100) {\n          discountMap[item] = true;\n        }\n      });\n    });\n    let scoreInfo = \"\";\n    Object.keys(scoreMap).forEach((value, index) => {\n      const hasDiscount = discountMap[value];\n      const score = hasDiscount ? scoreMap[value] - 50 : scoreMap[value];\n\n      scoreInfo += `${index + 1}P:\\t${score}`;\n      if (score >= 50) {\n        scoreInfo += `\\t(${100 - score} to 100)`;\n      }\n      if (hasDiscount) {\n        scoreInfo += `\\t(discount 50)`;\n      }\n      if (score >= 100) {\n        scoreInfo += \"\\t(LOSE)\";\n      }\n      scoreInfo += \"\\r\\n\";\n    });\n\n    setResultInfo(scoreInfo);\n  }, [dataSource]);\n\n  for (let index = 0; index < playerNum; index++) {\n    const playerID = `player_${index + 1}`;\n    tableColumns.push({\n      title: `${index + 1}P`,\n      dataIndex: playerID,\n      key: playerID,\n    });\n  }\n\n  const onAddNewRoundScore = (playerScores) => {\n    const newRoundScore = {\n      round: dataSource.length + 1,\n      key: `score_${dataSource.length + 1}`,\n    };\n    console.log(\"player scores\", playerScores);\n    for (let index = 0; index < Object.keys(playerScores).length; index++) {\n      const playerID = `player_${index + 1}`;\n      newRoundScore[playerID] = playerScores[playerID] ?? 0;\n    }\n    dataSource.push(newRoundScore);\n    setDataSource([...dataSource]);\n    setOpenScoreModal(false);\n  };\n\n  const onRevokeScore = () => {\n    dataSource.pop();\n    setDataSource([...dataSource]);\n  };\n\n  const onRestartGame = () => {\n    confirm({\n      content: \"Are you sure to restart the game? \",\n      onOk() {\n        setDataSource([]);\n      },\n    });\n  };\n\n  return (\n    <Flex className=\"w-full h-full p-4\" vertical>\n      <h2 className=\"text-lg mb-4\">Score board Actions</h2>\n      <Flex className=\"mb-4 space-x-4\">\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            setOpenScoreModal(true);\n          }}\n        >\n          Record score\n        </Button>\n\n        {dataSource.length > 0 && (\n          <Button type=\"default\" onClick={onRevokeScore}>\n            Revoke\n          </Button>\n        )}\n        {dataSource.length > 0 && (\n          <Button type=\"default\" danger onClick={onRestartGame}>\n            Restart\n          </Button>\n        )}\n      </Flex>\n      <pre className=\"mb-4  \">{resultInfo}</pre>\n      <NewScoreModal\n        playerNum={playerNum}\n        open={openScoreModal}\n        onOk={onAddNewRoundScore}\n        onCancel={() => {\n          setOpenScoreModal(false);\n        }}\n      />\n\n      {dataSource.length > 0 && (\n        <Table\n          className=\"w-full\"\n          columns={tableColumns}\n          dataSource={dataSource}\n          scroll={{ x: \"max-content\" }}\n          pagination={false}\n        ></Table>\n      )}\n    </Flex>\n  );\n}\n\nconst NewScoreModal = ({ playerNum, onOk, onCancel, open }) => {\n  const [playerScores, setScores] = useState({});\n  const genEmptyScores = useCallback(() => {\n    const scores = {};\n    Array.from({ length: playerNum }).map((_, index) => {\n      const playerID = `player_${index + 1}`;\n      scores[playerID] = 0;\n      return 0;\n    });\n    return scores;\n  }, [playerNum]);\n  useEffect(() => {\n    setScores(genEmptyScores());\n  }, [genEmptyScores]);\n\n  const onNewScoreValueChanged = (id, value) => {\n    playerScores[id] = value;\n    setScores({ ...playerScores });\n  };\n  return (\n    <Modal\n      open={open}\n      onCancel={onCancel}\n      onOk={() => {\n        onOk(playerScores);\n        setScores(genEmptyScores());\n      }}\n      title=\"Record new round score:\"\n    >\n      <Flex vertical className=\"space-y-2\">\n        <Divider />\n        {Array.from({ length: playerNum }).map((_, index) => {\n          const playerID = `player_${index + 1}`;\n          const playerName = `Player ${index + 1}`;\n          const score = playerScores[playerID] ?? 0;\n          return (\n            <Flex key={playerID} className=\"items-center text-base\">\n              {playerName}\n              <InputNumber\n                className=\"ml-4\"\n                type=\"tel\"\n                min={0}\n                max={50}\n                value={score}\n                onChange={(value) => {\n                  onNewScoreValueChanged(playerID, value);\n                }}\n              />\n            </Flex>\n          );\n        })}\n      </Flex>\n    </Modal>\n  );\n};\n"],"names":["PLAYER_NUM_SUPPORT","CaboScoreBoardPage","_useSearchParams","useSearchParams","playerNum","_slicedToArray","get","Object","keys","includes","_jsx","Flex","children","CaboScoreBoard","className","confirm","Modal","_ref","tableColumns","title","dataIndex","key","width","_useState","useState","_useState2","dataSource","setDataSource","_useState3","_useState4","openScoreModal","setOpenScoreModal","_useState5","_useState6","resultInfo","setResultInfo","useEffect","scoreMap","discountMap","forEach","record","console","log","JSON","stringify","item","scoreInfo","value","index","hasDiscount","score","concat","playerID","push","_jsxs","vertical","Button","type","onClick","length","pop","_toConsumableArray","danger","content","onOk","NewScoreModal","open","playerScores","newRoundScore","round","_playerScores$_player","onCancel","Table","columns","scroll","x","pagination","_ref2","_useState7","_useState8","setScores","genEmptyScores","useCallback","scores","Array","from","map","_","Divider","_playerScores$playerI","playerName","InputNumber","min","max","onChange","id","_objectSpread","onNewScoreValueChanged"],"sourceRoot":""}